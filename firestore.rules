rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    // Helper functions for authentication and authorization
    function signedIn() { 
      return request.auth != null; 
    }
    
    // App Check enforcement - ensures requests come from verified app instances
    function hasValidAppCheck() {
      return request.auth != null && 
             request.auth.token.firebase != null &&
             request.auth.token.firebase.app_check_token != null;
    }
    
    // Combined authentication check with App Check enforcement
    // Production mode: Requires both authentication and App Check
    function signedInWithAppCheck() {
      return signedIn() && hasValidAppCheck();
    }
    
    function isAdmin() { 
      return signedIn() && (request.auth.token.admin == true || 
             request.auth.token.email.lower() == 'obaidaalluhebe@gmail.com'); 
    }
    
    function isDoctor() { 
      return signedIn() && request.auth.token.doctor == true; 
    }

    // Checks if the user is a doctor AND this is their own document
    function isDoctorForDocument(uid) {
      return isDoctor() && request.auth.uid == uid;
    }
    
    function isPatient() { 
      return signedIn() && request.auth.token.patient == true; 
    }
    
    function isSelf(uid) { 
      return signedIn() && request.auth.uid == uid; 
    }
    
    function hasRole(role) {
      return signedIn() && request.auth.token[role] == true;
    }

    // Users collection - user profiles and role information
    match /users/{uid} {
      allow read: if isSelf(uid) || isAdmin();
      allow write: if isSelf(uid) || isAdmin();
      // Allow user creation during phone verification (before App Check is available)
      allow create: if signedIn() && request.auth.uid == uid;
    }

    // Test collection for debugging
    match /test/{document} {
      allow read, write: if signedIn();
    }

    // Patients collection - patient-specific data
    match /patients/{uid} {
      allow read, write: if isSelf(uid) || isAdmin();
      allow read: if isDoctor(); // Doctors can read patient info
    }

    // Doctors collection
    // Publicly readable for published doctors only (listed == true)
    // Writes restricted to doctors themselves or admins only
    match /doctors/{uid} {
      // Public can read if listed. Doctor can read their own profile. Admin can read any.
      // Use signedInWithAppCheck for all authenticated reads.
      allow read: if resource.data.listed == true || 
                    (signedInWithAppCheck() && (isDoctorForDocument(uid) || isAdmin()));

      // Only the doctor or an admin can write. App Check is required.
      allow write: if signedInWithAppCheck() && (isDoctorForDocument(uid) || isAdmin());

      // Only an admin can create.
      allow create: if signedInWithAppCheck() && isAdmin();
    }

    // Appointments collection - dev rules
    match /appointments/{id} {
      allow read, write: if request.auth != null; // Dev: allow any authenticated user
    }

    // Schedules collection - doctor scheduling
    match /schedules/{doctorId} {
      allow read: if signedIn(); // All users can read schedules to book appointments
      allow write: if isSelf(doctorId) || isAdmin(); // Only the doctor or admin can modify
    }
    
    match /schedules/{doctorId}/{date=**} {
      allow read: if signedIn(); // All users can read schedules
      allow write: if isSelf(doctorId) || isAdmin(); // Only the doctor or admin can modify
    }

    // Medical records - highly restricted
    match /medical_records/{patientId} {
      allow read, write: if isSelf(patientId) || isAdmin();
      allow read: if isDoctor(); // Doctors can read medical records
    }
    
    match /medical_records/{patientId}/{recordId} {
      allow read, write: if isSelf(patientId) || isAdmin();
      allow read: if isDoctor(); // Doctors can read medical records
      allow create: if isDoctor(); // Doctors can create medical records
    }

    // Admin-only collections
    match /admin/{document} {
      allow read, write: if isAdmin();
    }
    
    match /system/{document} {
      allow read, write: if isAdmin();
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
